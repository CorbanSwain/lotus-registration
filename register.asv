function MI = register (param)
MI = -1;

%%
if ~param.justCalcMI
    param.timestamp = [param.inputFileName{1}(1:end-4) '__' datestr(datetime('now'),'yyyymmdd_HHMMSS')];
    fname = sprintf('%s%s.log',param.savePath, param.timestamp);
    if ~exist(param.savePath,'dir')
        status = mkdir(param.savePath);
        if status == 1
            disp(['Created folder: ' param.savePath]);
        else
            disp(['Error attempting to create folder:' param.savePath]);
            status
            exit;
        end
    end
    diary(fname)
    tic
end

param

%% load volumes
f = [param.inputFilePath1 param.inputFileName{1}];
fprintf('\nLoading volume %s\n\n',f);
LFM1 = loadData(f, param);
f = [param.inputFilePath2 param.inputFileName{1}];
fprintf('\nLoading volume %s\n\n',f);
LFM2 = loadData(f, param);
param.voxel_z = param.voxel_z / param.interp;

%keyboard

%% if just transforming confocal data
if param.rapid && param.confocal
    tmp = LFM1;
    LFM1 = LFM2;
    LFM2 = ones(size(LFM2),'uint16');
    param.rot = -param.rot;
    param.centroid = calc_centroid(LFM2,param);
    param.trans = param.centroid;
end

%% if registration parameters are already known
%  then combine registered volumes
if param.rapid
    % must specify: param.centroid, param.trans, param.rot
    combineVols_iter_dim3 (LFM1, LFM2, param);
    %MI = mutual_information (LFM1, out, LFM2, param)
    param
    elapsedTime = toc
    diary off;
    return;
end


%% save TIF versions of input volumes
if param.lfdisplay
    f = param.inputFileName{1};
    outFile = sprintf('%s.tif',f(1:end-4));
    save_vol( LFM1, param.inputFilePath1, outFile);
    save_vol( LFM2, param.inputFilePath2, outFile);
end


%% clip volumes for registration
a = size(LFM1);
if ~isempty(find(param.clip>0))
    fprintf('\nClipping pixels from periphery:\n');
    fprintf('%d \n',param.clip);
    fprintf('\n\n');
    LFM1 = LFM1( 1+param.clip(1):a(1)-param.clip(2),...
        1+param.clip(3):a(2)-param.clip(4),...
        1+param.clip(5):a(3)-param.clip(6));
end
a = size(LFM2);
if ~isempty(find(param.clip>0))
    LFM2 = LFM2( 1+param.clip(1):a(1)-param.clip(2),...
        1+param.clip(3):a(2)-param.clip(4),...
        1+param.clip(5):a(3)-param.clip(6));
end

%keyboard

%% calculate thresholds
param = calculate_thresholds (LFM1, LFM2, param,'cdf_voxel_intensities');

%keyboard

%% voxel positions
param.index1 = find(LFM1>param.threshold1);
print_fraction(param.index1,LFM1,'LFM1');
pos1 = init_pos(param.index1,LFM1,param);
param.index2 = find(LFM2>param.threshold2);
print_fraction(param.index2,LFM2,'LFM2');
%param.size = size(LFM2);
pos2 = init_pos(param.index2,LFM2,param);

%% if justCalcMI
if param.justCalcMI
    param.centroid = calc_centroid(LFM2,param);
    tmp = translate (pos2, -param.centroid);
    tmp = rotate (tmp, param.rot);
    final_pos2 = translate (tmp, param.trans);
    MI = mutual_information (LFM1, final_pos2, LFM2, param);
    return;
end

%% coarse alignment of LFM2 to LFM1

% rotate
param.centroid = calc_centroid(LFM2,param);
canonical = translate (pos2, -param.centroid);
rotated = rotate (canonical,param.angle);
param.rot = param.angle;
new = translate (rotated, param.centroid);
param.trans = param.centroid;

%keyboard

% estimate offsets
offsets = estimate_offsets(LFM1, LFM2, new, param);
for i=1:3
    if ~isempty(param.offset{i})
        offsets(i) = param.offset{i};
    end
end
param.offset = offsets;
fprintf('\nestimated offsets = [%f %f %f]\n',offsets(1),offsets(2),offsets(3));
new = translate (new, offsets);
param.trans = param.trans + offsets;

%keyboard

%% plot data
if param.plot
    param = save_1d_max_projections(LFM1, LFM2, new, param,...
        '1d_max_projections_presim');
    %drawnow
    %keyboard
    save_2d_max_projections(LFM1, LFM2, new, param, 0,...
        '2d_max_projections_presim');
    %drawnow
    %keyboard
    save_2d_max_projections_compact(LFM1, LFM2, new, param, 0,...
        '2d_max_projections_compact_presim');
    %drawnow
    %keyboard
    save_2d_contour_plots(LFM1, LFM2, pos1, pos2, new, param,...
        'contour_plots_presim');
    drawnow
    %keyboard
end

%% null distribution
% for random rotations and offsets (within some range)
% calculate mutual information, MI
[cdf, centers, nullMIvec, param] = null_distribution (LFM1, LFM2, canonical, param);
param.cdf = cdf;
param.centers = centers;
param.nullMIvec = nullMIvec;

%keyboard
%% print MI of volumes pre- and post-coarse registration
% pre-coarse
if strcmp(param.myfunc_MI,'multiply')
    MI = mutual_information (LFM1, pos2, LFM2, param);
else
    disp('WTF!');
    keyboard;
end
w = find(param.centers>MI,1); % keep only first instance
if MI > param.bestMI
    fprintf('\npre-coarse MI frac = %.5g\n\n',double(MI)/double(param.bestMI));
elseif ~isempty(w)
    fprintf('\npre-coarse MI frac = %.5g\n\n',param.cdf(w));
else
    disp('WTF?');
    keyboard
end
% post-coarse
if strcmp(param.myfunc_MI,'multiply')
    MI = mutual_information (LFM1, new, LFM2, param);
else
    disp('WTF!');
    keyboard;
end
w = find(param.centers>MI,1); % keep only first instance
if MI > param.bestMI
    fprintf('\npost-coarse MI frac = %.5g\n\n',double(MI)/double(param.bestMI));
elseif ~isempty(w)
    fprintf('\npost-coarse MI frac = %.5g\n\n',param.cdf(w));
else
    disp('WTF?');
    keyboard
end

%keyboard

%% simulated annealing
[new, param] = simulated_annealing (LFM1, new, LFM2, canonical, param);
if param.plot
    save_stats(param);
end

%keyboard

%% combine registered volumes
if param.savevol
    % would be nice to re-load full unclipped volume here
    % but doing so would jack up the next few plots.
    %comb = combineVols (LFM1, LFM2, param);
    comb = combineVols_iter_dim3 (LFM1, LFM2, param);
end

if param.plot
    param = save_1d_max_projections(LFM1, LFM2, new, param,...
        '1d_max_projections_postsim');
    %drawnow
    %keyboard
    save_2d_max_projections(LFM1, LFM2, comb, param, 1, ...
        '2d_max_projections_postsim');
    %drawnow
    %keyboard
    save_2d_max_projections_compact(LFM1, LFM2, comb, param, 1, ...
        '2d_max_projections_compact_postsim');
    %drawnow
    %keyboard
    save_2d_contour_plots(LFM1, LFM2, pos1, pos2, new, param, ...
        'contour_plots_postsim');
    drawnow
    %keyboard
end

%% save final parameters
%fname = sprintf('%s%s_parameters.mat',param.savePath,param.timestamp);
%save(fname,'param');

param
elapsedTime = toc
diary off;

end


%% functions


function out = calc_centroid (LFM, param)
s = size(LFM);
out = s/2.*[param.voxel_y param.voxel_x param.voxel_z];
end


function pos = init_pos (linear_i,LFM, param)
[a,b,c] = ind2sub(size(LFM),linear_i);
y = single( (a-0.5) * param.voxel_y );
x = single( (b-0.5) * param.voxel_x );
z = single( (c-0.5) * param.voxel_z );
pos = [y x z];
end


% function param = set_prate (MI, param)
% % aim for 0.95 aceptance at T0
% %param.T0 = -1/log(param.init_p);
% %param.TC0 = round(log10(param.final_p) / log10(param.Trate))
% %param.T0 = -1/log(0.95)/MI;
% param.prate = 10^( ( log10(param.final_p)-log10(param.init_p) ) / param.TC0);
% end


function print_fraction (index, LFM, str)
i = 0;
for j=1:length(index)
    i = i + single(LFM(index(j)));
end
iT = single(sum(sum(sum(LFM))));

fi = i/iT;
fv = single(length(index))/single(numel(LFM));
fprintf('%s: %d of %d voxels (%7.3g), %d of %d total intensity (%7.3g)\n',...
    str,length(index),numel(LFM),fv,...
    i,iT,fi);
end


function offsets = estimate_offsets (LFM1, LFM2, new, param)

onetwo = squeeze(max(LFM1,[],3));
twothree = squeeze(max(LFM1,[],1));
LFM1_d1 = single(squeeze(max(onetwo,[],2)));
LFM1_d2 = single(squeeze(max(onetwo,[],1)));
LFM1_d3 = single(squeeze(max(twothree,[],1)));

%
% projections for new
%

% convert new from microns to pixels
a = size(new);
scale = [1/param.voxel_y*ones(a(1),1) ...
    1/param.voxel_x*ones(a(1),1) ...
    1/param.voxel_z*ones(a(1),1)];
abc_new = ceil(new.*scale);
ns = max(abc_new);

% create 2d projections of new in pixel space
onetwo = zeros(ns(1),ns(2));
for i=1:length(new)
    if abc_new(i,1) > 0 && abc_new(i,2) > 0
        onetwo(abc_new(i,1),abc_new(i,2)) = max([onetwo(abc_new(i,1),abc_new(i,2)) double(LFM2(param.index2(i)))]);
    end
end
twothree = zeros(ns(2),ns(3));
for i=1:length(new)
    if abc_new(i,2) > 0 && abc_new(i,3) > 0
        twothree(abc_new(i,2),abc_new(i,3)) = max([twothree(abc_new(i,2),abc_new(i,3))  double(LFM2(param.index2(i)))]);
    end
end
% convert 2d projections to 1d
new_d1 = squeeze(max(onetwo,[],2));
new_d2 = squeeze(max(onetwo,[],1));
new_d3 = squeeze(max(twothree,[],1));

%
% xcorr
%

% [u_acor, u_lag]  = xcorr( LFM1_d1,   new_d1 );
% [v_acor, v_lag]  = xcorr( LFM1_d2,   new_d2 );
% [w_acor, w_lag]  = xcorr( LFM1_d3,   new_d3 );
% 
% u_index = find(u_acor == max(u_acor));
% v_index = find(v_acor == max(v_acor));
% w_index = find(w_acor == max(w_acor));
% 
% offsets = [u_lag(u_index)*param.voxel_y...
%     v_lag(v_index)*param.voxel_x...
%     w_lag(w_index)*param.voxel_z...
%     ];
% 
% if param.plot
%     f = figure;
%     subplot(3,1,1);
%     plot(u_lag,u_acor/max(u_acor));
%     xlabel('lag in first dimension [pixels]');
%     ylabel('correlation');
%     title('Normalized cross-correlation between LFM1 and rotated LFM2');
%     subplot(3,1,2);
%     plot(v_lag,v_acor/max(v_acor));
%     xlabel('lag in second dimension [pixels]');
%     ylabel('correlation');
%     subplot(3,1,3);
%     plot(w_lag,w_acor/max(w_acor));
%     xlabel('lag in third dimension [pixels]');
%     ylabel('correlation');
%     
%     str=sprintf('%s%s_xcorr.png',param.savePath,param.timestamp);
%     save_plot(f, str);
% end

LFM1_d1_log10 = log10(LFM1_d1);
LFM1_d1_log10(find(isinf(LFM1_d1_log10))) = 0;
LFM1_d2_log10 = log10(LFM1_d2);
LFM1_d2_log10(find(isinf(LFM1_d2_log10))) = 0;
LFM1_d3_log10 = log10(LFM1_d3);
LFM1_d3_log10(find(isinf(LFM1_d3_log10))) = 0;

new_d1_log10 = log10(new_d1);
new_d1_log10(find(isinf(new_d1_log10))) = 0;
new_d2_log10 = log10(new_d2);
new_d2_log10(find(isinf(new_d2_log10))) = 0;
new_d3_log10 = log10(new_d3);
new_d3_log10(find(isinf(new_d3_log10))) = 0;

[u_acor, u_lag]  = xcorr( LFM1_d1_log10,   new_d1_log10 );
[v_acor, v_lag]  = xcorr( LFM1_d2_log10,   new_d2_log10 );
[w_acor, w_lag]  = xcorr( LFM1_d3_log10,   new_d3_log10 );

u_index = find(u_acor == max(u_acor));
[~, index] = min(abs(u_index - numel(u_acor)/2));
u_index = u_index(index);
v_index = find(v_acor == max(v_acor));
[~, index] = min(abs(v_index - numel(v_acor)/2));
v_index = v_index(index);
w_index = find(w_acor == max(w_acor));
[~, index] = min(abs(w_index - numel(w_acor)/2));
w_index = w_index(index);

offsets = [u_lag(u_index)*param.voxel_y...
    v_lag(v_index)*param.voxel_x...
    w_lag(w_index)*param.voxel_z...
    ];

if param.plot
    f = figure;
    subplot(3,1,1);
    plot(u_lag,u_acor/max(u_acor));
    hold on;
    plot([u_lag(u_index) u_lag(u_index)],[0 1],'r');
    hold off;
    xlabel('lag in first dimension [pixels]');
    ylabel('correlation');
    title('Normalized log cross-correlation between LFM1 and rotated LFM2');
    str = sprintf('offset = %.0d pixels %.1f um',u_lag(u_index),u_lag(u_index)*param.voxel_y);
    text(100,0.2,str,'FontSize',8,'Color',[0 0 0] ,'Interpreter','none');
    ylim([0 1]);
    subplot(3,1,2);
    plot(v_lag,v_acor/max(v_acor));
    hold on;
    plot([v_lag(v_index) v_lag(v_index)],ylim,'r');
    hold off;
    xlabel('lag in second dimension [pixels]');
    ylabel('correlation');
    str = sprintf('offset = %.0d pixels %.1f um',v_lag(v_index),v_lag(v_index)*param.voxel_x);
    text(100,0.2,str,'FontSize',8,'Color',[0 0 0] ,'Interpreter','none');
    ylim([0 1]);
    subplot(3,1,3);
    plot(w_lag,w_acor/max(w_acor));
    hold on;
    plot([w_lag(w_index) w_lag(w_index)],ylim,'r');
    hold off;
    xlabel('lag in third dimension [pixels]');
    ylabel('correlation');
    str = sprintf('offset = %.0d pixels %.1f um',w_lag(w_index),w_lag(w_index)*param.voxel_z);
    text(100,0.2,str,'FontSize',8,'Color',[0 0 0] ,'Interpreter','none');
    ylim([0 1]);
    
    str=sprintf('%s%s_xcorr.png',param.savePath,param.timestamp);
    save_plot(f, str);
end

end


function param = save_1d_max_projections (LFM1, LFM2, new, param, str)
colors = {[0 0 1]
    [0.8 0.8 0.8]
    [0 0 1]
    [1 0 0]};

onetwo = squeeze(max(LFM1,[],3));
twothree = squeeze(max(LFM1,[],1));
LFM1_d1 = single(squeeze(max(onetwo,[],2)));
LFM1_d2 = single(squeeze(max(onetwo,[],1)));
LFM1_d3 = single(squeeze(max(twothree,[],1)));

onetwo = squeeze(max(LFM2,[],3));
twothree = squeeze(max(LFM2,[],1));
LFM2_d1 = single(squeeze(max(onetwo,[],2)));
LFM2_d2 = single(squeeze(max(onetwo,[],1)));
LFM2_d3 = single(squeeze(max(twothree,[],1)));

% projections for new
% convert new from microns to pixels
a = size(new);
scale = [1/param.voxel_y*ones(a(1),1) ...
    1/param.voxel_x*ones(a(1),1) ...
    1/param.voxel_z*ones(a(1),1)];
abc_new = ceil(new.*scale);
ns = max(abc_new);

% create 2d projections of new in pixel space
onetwo = zeros(ns(1),ns(2));
for i=1:length(new)
    if abc_new(i,1) > 0 && abc_new(i,2) > 0
        onetwo(abc_new(i,1),abc_new(i,2)) = max([onetwo(abc_new(i,1),abc_new(i,2)) double(LFM2(param.index2(i)))]);
    end
end
twothree = zeros(ns(2),ns(3));
for i=1:length(new)
    if abc_new(i,2) > 0 && abc_new(i,3) > 0
        twothree(abc_new(i,2),abc_new(i,3)) = max([twothree(abc_new(i,2),abc_new(i,3))  double(LFM2(param.index2(i)))]);
    end
end
% convert 2d projections to 1d
new_d1 = squeeze(max(onetwo,[],2));
new_d2 = squeeze(max(onetwo,[],1));
new_d3 = squeeze(max(twothree,[],1));

if 0 < 1
    T = '      (scaled by total intensity in sample)';
    scale_d1 = [ sum(LFM1_d1) sum(LFM2_d1) sum(new_d1)];
    scale_d2 = [ sum(LFM1_d2) sum(LFM2_d2) sum(new_d2)];
    scale_d3 = [ sum(LFM1_d3) sum(LFM2_d3) sum(new_d3)];
    yl = 'normalized intensity';
    %disp(T);
elseif 0 < 1
    T = '      (scaled by max intensity in each projected volume)';
    scale_d1 = single([ max(LFM1_d1) max(LFM2_d1) max(new_d1)]);
    scale_d2 = single([ max(LFM1_d2) max(LFM2_d2) max(new_d2)]);
    scale_d3 = single([ max(LFM1_d3) max(LFM2_d3) max(new_d3)]);
    yl = 'normalized intensity';
    %disp(T);
else
    T = '      (not scaled)';
    scale_d1 = [1 1 1 1 1];
    scale_d2 = [1 1 1 1 1];
    scale_d3 = [1 1 1 1 1];
    yl = 'intensity';
    %disp(T);
end

f = figure;
set(gcf,'Position',[79          18        1270         940]);
subplot(3,1,1);
semilogy(LFM1_d1/scale_d1(1),'.','Color',colors{1});
hold on;
semilogy(LFM2_d1/scale_d1(2),'.','Color',colors{2});
semilogy(new_d1/scale_d1(3),'-','Color',colors{4});
xlabel('first dimension [pixels]');
ylabel(yl);
hold off;
legend('LFM1','LFM2','LFM2 coarse reg');
title([str T],'Interpreter','none');
if param.xlim_1d(1) > 0
    xlim([0 param.xlim_1d(1)]);
else
    a = xlim;
    xlim([0 a(2)]);
    param.xlim_1d(1)=a(2);
end

subplot(3,1,2);
semilogy(LFM1_d2/scale_d2(1),'.','Color',colors{1});
hold on;
semilogy(LFM2_d2/scale_d2(2),'.','Color',colors{2});
semilogy(new_d2/scale_d2(3),'-','Color',colors{4});
xlabel('second dimension [pixels]');
ylabel(yl);
hold off;
legend('LFM1','LFM2','LFM2 coarse reg');
if param.xlim_1d(2) > 0
    xlim([0 param.xlim_1d(2)]);
else
    a = xlim;
    xlim([0 a(2)]);
    param.xlim_1d(2)=a(2);
end

subplot(3,1,3);
semilogy(LFM1_d3/scale_d3(1),'.','Color',colors{1});
hold on;
semilogy(LFM2_d3/scale_d3(2),'.','Color',colors{2});
semilogy(new_d3/scale_d3(3),'-','Color',colors{4});
xlabel('third dimension [pixels]');
ylabel(yl);
hold off;
legend('LFM1','LFM2','LFM2 coarse reg');
if param.xlim_1d(3) > 0
    xlim([0 param.xlim_1d(3)]);
else
    a = xlim;
    xlim([0 a(2)]);
    param.xlim_1d(3)=a(2);
end

str=sprintf('%s%s_%s.png',param.savePath,param.timestamp,str);
save_plot(f, str);
end


function save_2d_contour_plots (LFM1, LFM2, pos1, pos2, new, param, str)
colors = {[1 0 0]
    [0.8 0.8 0.8]
    [0 0 1]
    [0.4 0.4 0.4]};

% projections for new
% convert new from microns to pixels
a = size(new);
scale = [1/param.voxel_y*ones(a(1),1) ...
    1/param.voxel_x*ones(a(1),1) ...
    1/param.voxel_z*ones(a(1),1)];
abc_new = ceil(new.*scale);
ns = max(abc_new);

% create 2d projections of new in pixel space
onetwo_new = zeros(ns(1),ns(2));
for i=1:length(new)
    if abc_new(i,1) > 0 && abc_new(i,2) > 0
        onetwo_new(abc_new(i,1),abc_new(i,2)) ...
            = max([onetwo_new(abc_new(i,1),abc_new(i,2)) ...
            double(LFM2(param.index2(i)))]);
    end
end
onethree_new = zeros(ns(1),ns(3));
for i=1:length(new)
    if abc_new(i,1) > 0 && abc_new(i,3) > 0
        onethree_new(abc_new(i,1),abc_new(i,3)) ...
            = max([onethree_new(abc_new(i,1),abc_new(i,3))...
            double(LFM2(param.index2(i)))]);
    end
end
threetwo_new = zeros(ns(3),ns(2));
for i=1:length(new)
    if abc_new(i,3) > 0 && abc_new(i,2) > 0
        threetwo_new(abc_new(i,3),abc_new(i,2))...
            = max([threetwo_new(abc_new(i,3),abc_new(i,2))...
            double(LFM2(param.index2(i)))]);
    end
end


% projections for pos1
% convert new from microns to pixels
a = size(pos1);
scale = [1/param.voxel_y*ones(a(1),1) ...
    1/param.voxel_x*ones(a(1),1) ...
    1/param.voxel_z*ones(a(1),1)];
abc_pos1 = ceil(pos1.*scale);
ns = max(abc_pos1);

% create 2d projections of new in pixel space
onetwo_pos1 = zeros(ns(1),ns(2));
for i=1:length(pos1)
    if abc_pos1(i,1) > 0 && abc_pos1(i,2) > 0
        onetwo_pos1(abc_pos1(i,1),abc_pos1(i,2))...
            = max([onetwo_pos1(abc_pos1(i,1),abc_pos1(i,2))...
            double(LFM1(param.index1(i)))]);
    end
end
onethree_pos1 = zeros(ns(1),ns(3));
for i=1:length(pos1)
    if abc_pos1(i,1) > 0 && abc_pos1(i,3) > 0
        onethree_pos1(abc_pos1(i,1),abc_pos1(i,3))...
            = max([onethree_pos1(abc_pos1(i,1),abc_pos1(i,3))...
            double(LFM1(param.index1(i)))]);
    end
end
threetwo_pos1 = zeros(ns(3),ns(2));
for i=1:length(pos1)
    if abc_pos1(i,3) > 0 && abc_pos1(i,2) > 0
        threetwo_pos1(abc_pos1(i,3),abc_pos1(i,2))...
            = max([threetwo_pos1(abc_pos1(i,3),abc_pos1(i,2))...
            double(LFM1(param.index1(i)))]);
    end
end

% projections for pos2
% convert new from microns to pixels
a = size(pos2);
scale = [1/param.voxel_y*ones(a(1),1) ...
    1/param.voxel_x*ones(a(1),1) ...
    1/param.voxel_z*ones(a(1),1)];
abc_pos2 = ceil(pos2.*scale);
ns = max(abc_pos2);

% create 2d projections of new in pixel space
onetwo_pos2 = zeros(ns(1),ns(2));
for i=1:length(pos2)
    if abc_pos2(i,1) > 0 && abc_pos2(i,2) > 0
        onetwo_pos2(abc_pos2(i,1),abc_pos2(i,2)) ...
            = max([onetwo_pos2(abc_pos2(i,1),abc_pos2(i,2)) ...
            double(LFM2(param.index2(i)))]);
    end
end
onethree_pos2 = zeros(ns(1),ns(3));
for i=1:length(pos2)
    if abc_pos2(i,2) > 0 && abc_pos2(i,3) > 0
        onethree_pos2(abc_pos2(i,1),abc_pos2(i,3)) ...
            = max([onethree_pos2(abc_pos2(i,1),abc_pos2(i,3)) ...
            double(LFM2(param.index2(i)))]);
    end
end
threetwo_pos2 = zeros(ns(3),ns(2));
for i=1:length(pos2)
    if abc_pos2(i,3) > 0 && abc_pos2(i,2) > 0
        threetwo_pos2(abc_pos2(i,3),abc_pos2(i,2)) ...
            = max([threetwo_pos2(abc_pos2(i,3),abc_pos2(i,2)) ...
            double(LFM2(param.index2(i)))]);
    end
end

% centroid in pixels
c = [param.centroid(1)/param.voxel_y...
    param.centroid(2)/param.voxel_x...
    param.centroid(3)/param.voxel_z];

f = figure('units','normalized','outerposition',[0 0 1 1]);

subplot(2,2,1);
hold on;
a = size(onethree_new);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int2;
v = [ clevel, clevel ];
contour(X,Y,onethree_new,v,'Color',colors{1});
a = size(onethree_pos1);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int1;
v = [ clevel, clevel ];
contour(X,Y,onethree_pos1,v,'Color',colors{3});
a = size(onethree_pos2);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int2;
v = [ clevel, clevel ];
contour(X,Y,onethree_pos2,v,'Color',colors{2});
xlabel('dim three [pixels]');
ylabel('dim one [pixels]');
plot(c(3),c(1),'g*')
daspect([1,1,1]);
hold off;
set(gca,'Ydir','reverse');
set(gca,'XDir','reverse');


subplot(2,2,2);
hold on;
a = size(onetwo_new);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int2;
v = [ clevel, clevel ];
contour(X,Y,onetwo_new,v,'Color',colors{1});
a = size(onetwo_pos1);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int1;
v = [ clevel, clevel ];
contour(X,Y,onetwo_pos1,v,'Color',colors{3});
a = size(onetwo_pos2);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int2;
v = [ clevel, clevel ];
contour(X,Y,onetwo_pos2,v,'Color',colors{2});
xlabel('dim two [pixels]');
ylabel('dim one [pixels]');
plot(c(2),c(1),'g*')
daspect([1,1,1]);
hold off;
set(gca,'Ydir','reverse');

subplot(2,2,4);
hold on;
a = size(threetwo_new);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int2;
v = [ clevel, clevel ];
contour(X,Y,threetwo_new,v,'Color',colors{1});
a = size(threetwo_pos1);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int1;
v = [ clevel, clevel ];
contour(X,Y,threetwo_pos1,v,'Color',colors{3});
a = size(threetwo_pos2);
x = 1:a(2);
y = 1:a(1);
[X,Y] = meshgrid(x,y);
clevel = param.contour_int2;
v = [ clevel, clevel ];
contour(X,Y,threetwo_pos2,v,'Color',colors{2});
xlabel('dim two [pixels]');
ylabel('dim three [pixels]');
plot(c(2),c(3),'g*');
daspect([1,1,1]);
hold off;
set(gca,'Ydir','reverse');

ax1 = axes('Position',[0 0 1 1],'Visible','off');
axes(ax1);

text(0.2,0.45,str,'FontSize',12,'Color',[0 0 0] ,'Interpreter','none');

msg = sprintf('LFM1: contour at intensity level %4.0f',param.contour_int1);
text(0.2,0.4,msg,'FontSize',12,'Color',colors{3},'Interpreter','none');

msg = sprintf('LFM2: contour at intensity level %4.0f',param.contour_int2);
text(0.2,0.35,msg,'FontSize',12,'Color',colors{2},'Interpreter','none');

msg = sprintf('LFM2 coarse reg: contour at intensity level %4.0f',param.contour_int2);
text(0.2,0.3,msg,'FontSize',12,'Color',colors{1},'Interpreter','none');

text(0.2,0.25,'centroid of LFM2 coarse reg','FontSize',12,'Color',[0 1 0],'Interpreter','none');

str=sprintf('%s%s_%s.png',param.savePath,param.timestamp,str);
save_plot(f, str);
end


function save_2d_max_projections (LFM1, LFM2, new, param, flag, str)

f = figure('units','normalized','outerposition',[0 0 1 1]);
yz = squeeze(max(LFM1,[],2));
subplot(2,6,1);
dr = ceil(log2(single(max(max(yz)))));
imagesc(yz,[0 2^dr]);
xlabel('three [pixels]');
ylabel('one [pixels]');
title('LFM1');
%colorbar();
daspect([1,1,1]);
set(gca,'XDir','reverse');

xy = squeeze(max(LFM1,[],3));
subplot(2,6,2);
dr = ceil(log2(single(max(max(xy)))));
imagesc(xy,[0 2^dr]);
xlabel('two [pixels]');
ylabel('one [pixels]');
title('LFM1');
%colorbar();
daspect([1,1,1]);

xz = squeeze(max(LFM1,[],1))';
subplot(2,6,8);
dr = ceil(log2(single(max(max(xz)))));
imagesc(xz,[0 2^dr]);
xlabel('two [pixels]');
ylabel('three [pixels]');
title('LFM1');
colorbar();
daspect([1,1,1]);

yz = squeeze(max(LFM2,[],2));
subplot(2,6,3);
dr = ceil(log2(single(max(max(yz)))));
imagesc(yz,[0 2^dr]);
xlabel('three [pixels]');
ylabel('one [pixels]');
title('LFM2');
%colorbar();
daspect([1,1,1]);
set(gca,'XDir','reverse');


xy = squeeze(max(LFM2,[],3));
subplot(2,6,4);
dr = ceil(log2(single(max(max(xy)))));
imagesc(xy,[0 2^dr]);
xlabel('two [pixels]');
ylabel('one [pixels]');
title('LFM2');
%colorbar();
daspect([1,1,1]);

xz = squeeze(max(LFM2,[],1))';
subplot(2,6,10);
dr = ceil(log2(single(max(max(xz)))));
imagesc(xz,[0 2^dr]);
xlabel('two [pixels]');
ylabel('three [pixels]');
title('LFM2');
colorbar();
daspect([1,1,1]);

if flag
    yz = squeeze(max(new,[],2));
    subplot(2,6,5);
    dr = ceil(log2(single(max(max(yz)))));
    imagesc(yz,[0 2^dr]);
    xlabel('three [pixels]');
    ylabel('one [pixels]');
    title('DDLFM');
    %colorbar();
    daspect([1,1,1]);
    set(gca,'XDir','reverse');
    
    xy = squeeze(max(new,[],3));
    subplot(2,6,6);
    dr = ceil(log2(single(max(max(xy)))));
    imagesc(xy,[0 2^dr]);
    xlabel('two [pixels]');
    ylabel('one [pixels]');
    title('DDLFM');
    %colorbar();
    daspect([1,1,1]);
    
    xz = squeeze(max(new,[],1))';
    subplot(2,6,12);
    dr = ceil(log2(single(max(max(xz)))));
    imagesc(xz,[0 2^dr]);
    xlabel('two [pixels]');
    ylabel('three [pixels]');
    title('DDLFM');
    colorbar();
    daspect([1,1,1]);
end

ax1 = axes('Position',[0 0 1 1],'Visible','off');
axes(ax1);
text(0.1,0.98,['LFM1 = ' param.inputFilePath1 param.inputFileName{1}],'FontSize',8,'Color',[0 0 0],'Interpreter','none');
text(0.1,0.96,['LFM2 = ' param.inputFilePath2 param.inputFileName{1}],'FontSize',8,'Color',[0 0 0],'Interpreter','none');
if flag
    text(0.1,0.94,['DDLFM = ' param.savePath param.timestamp],'FontSize',8,'Color',[0 0 0],'Interpreter','none');
end
text(0.4,0.1,str,'FontSize',8,'Color',[0 0 0],'Interpreter','none');
drawnow

% save figure
str=sprintf('%s%s_%s.png',param.savePath,param.timestamp, str);
save_plot(f, str);

end


function save_2d_max_projections_compact (LFM1, LFM2, new, param, flag, str)

f = figure('units','normalized','outerposition',[0 0 1 1]);

subplot(1,3,1);
yz = squeeze(max(LFM1,[],2));
xy = squeeze(max(LFM1,[],3));
xz = squeeze(max(LFM1,[],1))';
a = size(LFM1);
big_image = [a(3)+a(1) a(3)+a(2)];
imagesc(zeros(big_image));
a = size(yz);
x = [1 a(2)];
y = [1 a(1)];
imagesc('XData',x,'YData',y,'CData',fliplr(yz));
b = size(xy);
x = [a(2)+1 b(2)+a(2)];
y = [1 b(1)];
imagesc('XData',x,'YData',y,'CData',xy);
c = size(xz);
x = [a(2)+1 b(2)+a(2)];
y = [b(1)+1 b(1)+c(1)];
imagesc('XData',x,'YData',y,'CData',xz);
title('LFM1');
colorbar();
xlabel('pixels');
ylabel('pixels');
daspect([1,1,1]);

subplot(1,3,2);
yz = squeeze(max(LFM2,[],2));
xy = squeeze(max(LFM2,[],3));
xz = squeeze(max(LFM2,[],1))';
a = size(LFM2);
big_image = [a(3)+a(1) a(3)+a(2)];
imagesc(zeros(big_image));
a = size(yz);
x = [1 a(2)];
y = [1 a(1)];
imagesc('XData',x,'YData',y,'CData',fliplr(yz));
b = size(xy);
x = [a(2)+1 b(2)+a(2)];
y = [1 b(1)];
imagesc('XData',x,'YData',y,'CData',xy);
c = size(xz);
x = [a(2)+1 b(2)+a(2)];
y = [b(1)+1 b(1)+c(1)];
imagesc('XData',x,'YData',y,'CData',xz);
title('LFM2');
colorbar();
xlabel('pixels');
ylabel('pixels');
daspect([1,1,1]);

if flag
    subplot(1,3,3);
    yz = squeeze(max(new,[],2));
    xy = squeeze(max(new,[],3));
    xz = squeeze(max(new,[],1))';
    a = size(new);
    big_image = [a(3)+a(1) a(3)+a(2)];
    imagesc(zeros(big_image));
    a = size(yz);
    x = [1 a(2)];
    y = [1 a(1)];
    imagesc('XData',x,'YData',y,'CData',fliplr(yz));
    b = size(xy);
    x = [a(2)+1 b(2)+a(2)];
    y = [1 b(1)];
    imagesc('XData',x,'YData',y,'CData',xy);
    c = size(xz);
    x = [a(2)+1 b(2)+a(2)];
    y = [b(1)+1 b(1)+c(1)];
    imagesc('XData',x,'YData',y,'CData',xz);
    title('DDLFM');
    colorbar();
    xlabel('pixels');
    ylabel('pixels');
    daspect([1,1,1]);
end

ax1 = axes('Position',[0 0 1 1],'Visible','off');
axes(ax1);
text(0.1,0.98,['LFM1 = ' param.inputFilePath1 param.inputFileName{1}],'FontSize',8,'Color',[0 0 0],'Interpreter','none');
text(0.1,0.96,['LFM2 = ' param.inputFilePath2 param.inputFileName{1}],'FontSize',8,'Color',[0 0 0],'Interpreter','none');
if flag
    text(0.1,0.94,['DDLFM = ' param.savePath param.timestamp],'FontSize',8,'Color',[0 0 0],'Interpreter','none');
end
text(0.4,0.1,str,'FontSize',8,'Color',[0 0 0],'Interpreter','none');
drawnow

% save figure
str=sprintf('%s%s_%s.png',param.savePath,param.timestamp, str);
save_plot(f, str);

end
